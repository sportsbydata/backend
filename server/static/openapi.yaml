openapi: 3.1.0
info:
  title: Bryant API
  description: API for scouting
  version: '1.0'
servers:
  - url: 'https://dev-sbd-api.hata.lol'
paths:
  /v1/organization:
    get:
      operationId: getOrganization
      summary: Get current session organization
      tags:
        - Organization
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/organizations:
    post:
      operationId: createOrganization
      summary: Create organization
      tags:
        - Organization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
              required:
                - id
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/account:
    get:
      operationId: getAccount
      summary: Retrieve current session account
      tags:
        - Account
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/accounts:
    post:
      operationId: createAccount
      summary: Onboard a new user
      tags:
        - Account
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json: {}  
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
    get:
      operationId: getAccounts
      summary: Retrieve a list of accounts on the session organization
      tags:
        - Account
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/teams:
    get:
      operationId: getTeams
      summary: Retrieve a list of teams
      tags:
        - Team
      security:
        - BearerAuth: []
      parameters:
        - name: league_uuid
          in: query
          schema:
            type: string
            format: uuid
          description: Filter teams that belong to a league
        - name: team_uuids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
          description: Filter teams by uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
    post:
      operationId: createTeam
      summary: Create a new team
      tags:
        - Team
      security:
        - BearerAuth:
            - 'org:teams:manage'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeam'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/leagues:
    get:
      operationId: getLeagues
      summary: Retrieve a list of leagues
      tags:
        - League
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/League'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
    post:
      operationId: createLeague
      summary: Create a new league
      tags:
        - League
      security:
        - BearerAuth:
            - 'org:leagues:manage'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLeague'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/League'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/organization-league:
    put:
      operationId: updateOrganizationLeagues
      summary: Update organization leagues
      tags:
        - League
      security:
        - BearerAuth:
            - 'org:leagues:manage'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                league_uuids:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - league_uuids
      responses:
        '201':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/active:
    get:
      operationId: getActiveMatches
      summary: Retrieve a list of active matches
      tags:
        - Match
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/finished:
    get:
      operationId: getFinishedMatches
      summary: Retrieve a list of finished matches
      tags:
        - Match
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'
                  cursor:
                    type: string
                    description: The cursor from where to continue searching
                required:
                  - items
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches:
    post:
      operationId: createMatch
      summary: Create a new match
      tags:
        - Match
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMatch'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/{matchID}/finish:
    post:
      operationId: finishMatch
      summary: Finish the match
      tags:
        - Match
      security:
        - BearerAuth: []
      parameters:
        - name: matchID
          in: path
          required: true
          schema:
            type: string
          description: Match identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchFinish'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/{matchID}/scouts:
    get:
      operationId: getMatchScouts
      summary: Retrieve a list of match scouts
      tags:
        - Match
      security:
        - BearerAuth: []
      parameters:
        - name: matchID
          in: path
          required: true
          schema:
            type: string
          description: Match identifier
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchScout'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/{matchID}/scout:
    post:
      operationId: scoutMatch
      summary: Scout a match
      tags:
        - Match
      security:
        - BearerAuth: []
      parameters:
        - name: matchID
          in: path
          required: true
          schema:
            type: string
          description: Match identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMatchScout'
      responses:
        '201':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /v1/matches/{matchID}/finish-scouting:
    post:
      operationId: finishMatchScouting
      summary: Finish match scouting
      tags:
        - Match
      security:
        - BearerAuth: []
      parameters:
        - name: matchID
          in: path
          required: true
          schema:
            type: string
          description: Match identifier
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: string
            required:
              - message
              - code
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: string
            required:
              - message
              - code
    Internal:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: string
            required:
              - message
              - code
    NotFound:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: string
            required:
              - message
              - code
  schemas:
    Organization:
      type: object
      properties:
        id:
          type: string
        scouting_config:
          $ref: '#/components/schemas/ScoutingConfig'
      required:
        - id
        - scouting_config
    ScoutingConfig:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/Outcome'
        layouts:
          type: array
          items:
            $ref: '#/components/schemas/Layout'
      required:
        - actions
        - outcomes
        - layouts
    Action:
      type: object
      properties:
        id:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ActionOption'
      required:
        - id
        - options
    ActionOption:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    Outcome:
      type: object
      properties:
        id:
          type: string
        points:
          type: integer
        ended_in_shot:
          type: integer
        possible_free_throws:
          type: integer
        statistict_tags:
          type: array
          items:
            type: string
      required:
        - id
        - points
        - ended_in_shot
        - possible_free_throws
    Layout:
      type: object
      properties:
        name:
          type: string
        actions:
          type: array
          items:
            type: string
      required:
        - name
        - actions
    Account:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        avatar_url:
          type: string
      required:
        - id
        - first_name
        - last_name
        - avatar_url
    NewTeam:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    Team:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
      required:
        - uuid
        - name
    NewLeague:
      type: object
      properties:
        name:
          type: string
        team_uuids:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - team_uuids
    League:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
      required:
        - uuid
        - name
        - teams
    NewMatch:
      type: object
      properties:
        league_uuid:
          type: string
          format: uuid
        away_team_uuid:
          type: string
          format: uuid
        home_team_uuid:
          type: string
          format: uuid
      required:
        - league_uuid
        - away_team_uuid
        - home_team_uuid
    MatchFinish:
      type: object
      properties:
        home_score:
          type: integer
        away_score:
          type: integer
    Match:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        league_uuid:
          type: string
          format: uuid
        away_team_uuid:
          type: string
          format: uuid
        home_team_uuid:
          type: string
          format: uuid
        created_by:
          type: string
        home_score:
          type: integer
        away_score:
          type: integer
        starts_at:
          type: string
          format: date-time
        finished_at:
          type: string
          format: date-time
      required:
        - uuid
        - league_uuid
        - away_team_uuid
        - home_team_uuid
        - created_by
        - starts_at
    Mode:
      type: string
      enum:
        - attack
        - defence
        - attack_defence
    Submode:
      type: string
      enum:
        - all_rules
        - any_rules
        - our_rules
        - not_our_rules
        - plays
    NewMatchScout:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/Mode'
        submode:
          $ref: '#/components/schemas/Submode'
      required:
        - mode
        - submode
    MatchScout:
      type: object
      properties:
        account_id:
          type: string
        mode:
          $ref: '#/components/schemas/Mode'
        submode:
          $ref: '#/components/schemas/Submode'
        finished_at:
          type: string
          format: date-time
      required:
        - account_id
        - mode
        - submode
security:
  - BearerAuth: []
